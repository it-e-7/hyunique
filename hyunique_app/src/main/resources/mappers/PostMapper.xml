<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kosa5.hyunique.post.mapper.PostMapper">

	<resultMap id="PostDetailMap" type="PostDetailVO">
		<result property="postId" column="post_id" />
		<collection property="imgList" column="post_id"
			select="getImgList" />
		<collection property="productList" column="post_id"
			select="getProductList" />
		<collection property="styleTagList" column="post_id"
			select="getStyleTagList" />
		<collection property="postThumbnailList" column="post_id"
			select="getPostThumbnailListByProduct" />
	</resultMap>

	<resultMap id="imgUrlResultMap" type="String">
		<result column="IMG_URL" jdbcType="VARCHAR" property="imgUrl"/>
	</resultMap>

	<select id="getPostDetailByPostIdUserId" parameterType="map"
		resultMap="PostDetailMap">
		SELECT post_id, p.user_id, user_img,
		user_nickname, user_height, user_form, post_date,
		post_content, season_name, tpo_name,
		(SELECT user_id
		FROM hy_stylelike
		WHERE user_id = #{userId} AND post_id = #{postId}) as style_like ,
		(SELECT follower_id
		FROM hy_follow
		WHERE follower_id = #{userId} AND
		following_id = (SELECT user_id
		FROM hy_post
		WHERE post_id = #{postId})) as follow ,
		(SELECT count(*)
		FROM hy_stylelike
		WHERE post_id = #{postId}) as like_count
		FROM hy_post p
		JOIN hy_seasontag s ON p.season_id = s.season_id
		JOIN hy_tpotag t ON p.tpo_id = t.tpo_id
		JOIN hy_user u ON p.user_id = u.user_id
		WHERE p.post_id = #{postId}
	</select>

	<select id="getImgList" parameterType="int" resultType="String">
		SELECT
		img_url
		FROM hy_image
		WHERE post_id = #{postId}
	</select>

	<select id="getProductList" parameterType="int"
		resultType="PostProductVO">
		SELECT *
		FROM (SELECT * FROM post_pin WHERE post_id =
		#{postId})p, hy_product r
		WHERE p.product_id = r.product_id
	</select>

	<select id="getStyleTagList" parameterType="int"
		resultType="String">
		SELECT t.style_name
		FROM hy_styletag t, (SELECT * FROM
		post_style_tag WHERE post_id = #{postId}) s
		WHERE t.style_id =
		s.style_id
	</select>

	<select id="getPostThumbnailListByProduct" parameterType="int"
		resultType="PostThumbnailVO">
		<![CDATA[
		SELECT DISTINCT p.post_id, thumbnail_url
		FROM hy_post p JOIN post_pin t ON p.post_id = t.post_id
		WHERE t.product_id IN (SELECT product_id
                        		FROM post_pin
                        		WHERE post_id = #{postId}) AND p.post_id != #{postId} AND ROWNUM <= 10
        ]]>
	</select>

	<insert id="insertPostLike" parameterType="map">
		INSERT INTO
		hy_stylelike (user_id, post_id)
		VALUES (#{userId}, #{postId})
	</insert>

	<delete id="deletePostLike" parameterType="map">
		DELETE FROM
		hy_stylelike
		WHERE user_id = #{userId} AND post_id = #{postId}
	</delete>

	<select id="getTagInform" resultType="tagVO">
		SELECT 'style' as type, style_id as tagId, style_name as tagName FROM HY_STYLETAG
		UNION ALL
		SELECT 'tpo' as type, tpo_id as tagId, tpo_name as tagName FROM HY_TPOTAG
		UNION ALL
		SELECT 'season' as type, season_id as tagId, season_name as tagName FROM HY_SEASONTAG
	</select>


	<insert id="insertOnePost" statementType="CALLABLE" parameterType="map">
		call insert_one_post(
			#{postProduct, typeHandler=com.kosa5.hyunique.post.util.PostProductTypeHandler},
			#{post, typeHandler=com.kosa5.hyunique.post.util.PostTypeHandler},
			#{imgUrl, typeHandler=com.kosa5.hyunique.post.util.ListTypeHandler},
			#{styleId, typeHandler=com.kosa5.hyunique.post.util.ListTypeHandler},
			#{state, mode=OUT, jdbcType=VARCHAR, javaType=String}
		)
	</insert>
	
	<select id="loadMorePost" parameterType="map" resultType="PostVO">
        <![CDATA[
        SELECT *
        FROM (
            SELECT hp.*, (
                SELECT COUNT(*)
                FROM hy_stylelike hsl
                WHERE hsl.post_id = hp.post_id
            ) AS like_count
            FROM hy_post hp
            ORDER BY like_count DESC
        )
        OFFSET #{page} ROWS FETCH NEXT #{pageSize} ROWS ONLY
        ]]>
    </select>



    <select id="loadFilterPost" parameterType="FilterPostVO" resultType="PostVO">
    	SELECT *
    	FROM(
        <if test='selectedType != null and selectedType.equals("following")'>
            SELECT DISTINCT P.*
        </if>
        <if test='selectedType != null and selectedType.equals("recommend")'>
			SELECT DISTINCT P.POST_ID, P.POST_DATE, P.POST_CONTENT, P.THUMBNAIL_URL,
			COUNT(SL.POST_ID) AS LIKE_COUNT,
			(COUNT(SL.POST_ID)*5 +
			SUM(
			CASE
			WHEN P.POST_DATE > TRUNC(SYSDATE) THEN 50
			WHEN P.POST_DATE > TRUNC(SYSDATE) - 1 THEN 40
			WHEN P.POST_DATE > TRUNC(SYSDATE) - 2 THEN 30
			WHEN P.POST_DATE > TRUNC(SYSDATE) - 3 THEN 20
			WHEN P.POST_DATE > TRUNC(SYSDATE) - 4 THEN 10
			WHEN P.POST_DATE > TRUNC(SYSDATE) - 5 THEN 00
			ELSE 0
			END
			)) AS total_score
        </if>
        <if test='selectedType != null and selectedType.equals("style-ranking")'>
            SELECT DISTINCT P.POST_ID, P.POST_DATE, P.POST_CONTENT, P.THUMBNAIL_URL, COUNT(SL.POST_ID) AS LIKE_COUNT
        </if>
        FROM (
        SELECT P.POST_ID, P.POST_DATE, P.POST_CONTENT, P.THUMBNAIL_URL
        FROM HY_POST P
        INNER JOIN HY_USER U ON P.USER_ID = U.USER_ID
        <where>
            <if test='selectedType != null and selectedType.equals("following")'>
                AND P.USER_ID IN (SELECT FOLLOWING_ID FROM HY_FOLLOW WHERE FOLLOWER_ID = #{userId})
            </if>
            <if test="gender != null and gender != ''">
                AND U.USER_SEX IN
                <foreach collection="gender" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="tpo != null and tpo.size() > 0">
                AND TPO_ID IN
                <foreach collection="tpo" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="minHeight != null">
                <![CDATA[
                AND (
                U.USER_HEIGHT >= #{minHeight}
                OR U.USER_HEIGHT IS NULL
                )
                ]]>
            </if>
            <if test="maxHeight != null">
                <![CDATA[
                AND (
                U.USER_HEIGHT <= #{maxHeight}
                OR U.USER_HEIGHT IS NULL
                )
                ]]>
            </if>
            <if test="season != null and season.size() > 0">
                AND SEASON_ID IN
                <foreach collection="season" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="style != null and style.size() > 0">
                AND P.POST_ID IN
                ( SELECT POST_ID FROM post_style_tag WHERE STYLE_ID IN
                <foreach collection="style" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
                )
            </if>
        </where>
        ) P
        LEFT JOIN HY_STYLELIKE SL ON P.POST_ID = SL.POST_ID
        <if test='selectedType != null and selectedType.equals("following")'>
            ORDER BY P.POST_DATE DESC
        </if>
        <if test='selectedType != null and selectedType.equals("style-ranking")'>
            GROUP BY P.POST_ID, P.POST_DATE, P.POST_CONTENT, P.THUMBNAIL_URL
            ORDER BY like_count DESC
        </if>
        <if test='selectedType != null and selectedType.equals("recommend")'>
			GROUP BY P.POST_ID, P.POST_DATE, P.POST_CONTENT, P.THUMBNAIL_URL
            ORDER BY TOTAL_SCORE DESC
        </if>
        )
        <if test="page != null">
            OFFSET  #{page}
            ROWS FETCH NEXT #{pageSize} ROWS ONLY
        </if>
    </select>

    <select id="countFollower" parameterType="FilterPostVO" resultType="Integer">
        SELECT COUNT(P.POST_ID) AS POST_COUNT
        FROM HY_FOLLOW F
        JOIN HY_POST P ON F.FOLLOWING_ID = P.USER_ID
        WHERE F.FOLLOWER_ID = #{userId}
    </select>
    
	<delete id="deleteOnePost" statementType="CALLABLE" parameterType="map">
		call DELETE_POST(
			#{postId, mode=IN, jdbcType=INTEGER, javaType=Integer},
			#{imgUrl, mode=OUT, jdbcType=CURSOR, resultMap=imgUrlResultMap},
			#{state, mode=OUT, jdbcType=VARCHAR, javaType=String}
		)
	</delete>
</mapper>